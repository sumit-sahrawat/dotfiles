{{- if .app.zsh -}}

###############################################################################
# Environment

export XDG_CONFIG_HOME=~/.config

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export EDITOR={{ ternary "hx" "vi" .app.helix }}
export VISUAL=hx

{{- if .app.bat }}

export MANPAGER="sh -c 'col -bx | bat --language man --style=plain'"

{{- end }}

{{- if .lang.cpp }}

export CC=clang
export CXX=clang++

{{- end }}

{{- if .lang.dotnet }}

export DOTNET_ROOT="${HOMEBREW_PREFIX}/opt/dotnet/libexec"

{{- end }}

{{- if .lang.go }}

export GOPATH=~/.go

{{- end }}

# Extend PATH.
path=(
	~/.local/bin

{{- if .lang.cpp }}
	${HOMEBREW_PREFIX}/opt/llvm/bin
{{- end }}

{{- if .lang.rust }}
	~/.cargo/bin
{{- end }}

{{- if .lang.go }}
	"${GOPATH}/bin"
{{- end }}

	$path
)

fpath=(
	~/.local/share/zsh/site-functions

{{- if .app.docker }}
	~/.docker/completions
{{- end }}

	$fpath
)

###############################################################################
# zsh4humans (https://github.com/romkatv/zsh4humans/blob/v5/README.md)

# https://github.com/romkatv/zsh4humans/blob/v5/tips.md#prompt
POSTEDIT=$'\n\n\e[2A'

zstyle ':z4h:'                auto-update      'no'
zstyle ':z4h:'                auto-update-days '28'

zstyle ':z4h:bindkey'         keyboard  'mac'
zstyle ':z4h:'                start-tmux 'no'
# zstyle ':z4h:'                start-tmux command tmux -u new -A -D -t z4h
zstyle ':z4h:'                prompt-at-bottom 'no'
zstyle ':z4h:'                propagate-cwd yes

if test -n "${KITTY_INSTALLATION_DIR}"; then
	export KITTY_SHELL_INTEGRATION="enabled"
	autoload -Uz -- "${KITTY_INSTALLATION_DIR}"/shell-integration/zsh/kitty-integration
	kitty-integration
	unfunction kitty-integration

	zstyle ':z4h:'                term-shell-integration 'no'
else
	zstyle ':z4h:'                term-shell-integration 'yes'
fi

zstyle ':z4h:autosuggestions' forward-char 'partial-accept'
zstyle ':z4h:autosuggestions' end-of-line 'partial-accept'

# Instruct zsh4humans to use fzf from PATH.
zstyle ':z4h:*'               fzf-command fzf
zstyle ':z4h:fzf-complete'    recurse-dirs 'yes'

zstyle ':z4h:ssh:*'           enable 'no'

###############################################################################
# Clone git repositories using `z4h install`

{{- if .app.git }}

z4h install zimfw/git

{{- end }}

###############################################################################
# Initialize zsh4humans. Console/Network I/O is unavailable after this.
z4h init || return

###############################################################################
# Customizations

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt no_auto_menu  # require an extra TAB press to open the completion menu
setopt no_auto_cd    # don't cd without cd

# Source additional local files if they exist.
z4h source --compile ~/.bashrc
z4h source --compile ~/.private.zsh

# Define key bindings.
z4h bindkey z4h-cd-back    Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up      Shift+Up     # cd into the parent directory
z4h bindkey z4h-cd-down    Shift+Down   # cd into a child directory

# Always accept line on enter
z4h bindkey z4h-accept-line Enter

# Autoload functions.
autoload -Uz zmv

# Define functions and completions.
function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md

###############################################################################
# Aliases

# Basics
{{- if .app.bat }}
alias c='bat --style=plain'
alias b='bat --style=default'
{{- else }}
alias c='cat'
{{- end }}
alias e='${EDITOR}'
alias o='open'
alias q='exit'

# System upgrade
function :sup {
	chezmoi update --init --apply --refresh-externals
	brew upgrade

{{- if .lang.rust }}
	rustup update
{{- end }}

{{- if .app.tealdeer }}
	tldr --update
{{- end }}

	z4h update
}

# chezmoi
alias :ha='chezmoi add'
alias :hA='chezmoi add --template'
alias :hc='cd {{ .chezmoi.sourceDir | quote }}'
alias :hd='chezmoi diff --init'
alias :he='chezmoi edit --init --apply'
alias :hs='chezmoi edit-config'
alias :hS='chezmoi cat-config'
alias :hm='chezmoi merge'
alias :hp='chezmoi apply --init'
alias :hu='chezmoi update --init'
alias :hU='chezmoi update --init --refresh-externals'

{{- if .app.git }}

gprefix=':g'

zstyle ':zim:git' aliases-prefix "${gprefix}"
z4h load --compile zimfw/git

unset gprefix

{{- end }}

{{- if and .app.git .app.ripgrep }}

function rg {
	if [[ -t 1 ]]; then
		# syntax highlight using delta for terminal output
		command rg --json "${@}" | delta
	else
		# no json + delta when piping output
		command rg "${@}"
	fi
}

{{- end }}

{{- if .app.eza }}

alias ls=eza

# tree: include hidden files, exclude gitignored paths, exclude .git dir
alias :t='eza --tree --git-ignore --ignore-glob .git --all'

# tree: exclude hidden files, exclude gitignored paths, exclude .git dir
alias :tA='eza --tree --git-ignore --ignore-glob .git'

# tree: include hidden files, include gitignored paths, exclude .git dir
alias :tG='eza --tree --ignore-glob .git --all'

# tree: exclude hidden files, include gitignored paths, exclude .git dir
alias :tGA='eza --tree --ignore-glob .git'

{{- end }}

{{- if .app.mpv }}

function :mpv {
	mpv "${@}" </dev/null &>/dev/null & disown
}

function :ytdl {
	yt-dlp --downloader aria2c "${@}"
}

function :yt {
	:ytdl "${@}" --exec "mpv %(filepath,_filename|)q </dev/null &>/dev/null & disown"
}

{{- end }}

{{- end }}
