# Nushell Config File

# The default config record. This is where much of your global configuration is setup.
$env.config = {
    show_banner: false # true or false to enable or disable the welcome banner at startup

    ls: {
        use_ls_colors: true # use the LS_COLORS environment variable to colorize output
        clickable_links: true # enable or disable clickable links. Your terminal has to support links.
    }

    rm: {
        always_trash: false # always act as if -t was given. Can be overridden with -p
    }

    table: {
        mode: rounded # basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other
        index_mode: always # "always" show indexes, "never" show indexes, "auto" = show indexes when a table has "index" column
        show_empty: true # show 'empty list' and 'empty record' placeholders for command output
        padding: { left: 1, right: 1 } # a left right padding of each column in a table
        trim: {
            methodology: wrapping # wrapping or truncating
            wrapping_try_keep_words: true # A strategy used by the 'wrapping' methodology
            truncating_suffix: "..." # A suffix used by the 'truncating' methodology
        }
        header_on_separator: false # show header text on separator/border line
        # abbreviated_row_count: 10 # limit data rows from top and bottom after reaching a set point
    }

    error_style: "fancy" # "fancy" or "plain" for screen reader-friendly error messages

    # datetime_format determines what a datetime rendered in the shell would look like.
    # Behavior without this configuration point will be to "humanize" the datetime display,
    # showing something like "a day ago."
    datetime_format: {
        # normal: '%a, %d %b %Y %H:%M:%S %z'    # shows up in displays of variables or other datetime's outside of tables
        # table: '%m/%d/%y %I:%M:%S%p'          # generally shows up in tabular outputs such as ls. commenting this out will change it to the default human readable datetime format
    }

    explore: {
        status_bar_background: { fg: "#1D1F21", bg: "#C4C9C6" },
        command_bar_text: { fg: "#C4C9C6" },
        highlight: { fg: "black", bg: "yellow" },
        status: {
            error: { fg: "white", bg: "red" },
            warn: {}
            info: {}
        },
        selected_cell: { bg: light_blue },
    }

    history: {
        max_size: 100_000 # Session has to be reloaded for this to take effect
        sync_on_enter: true # Enable to share history between multiple sessions, else you have to close the session to write history to file
        file_format: "plaintext" # "sqlite" or "plaintext"
        isolation: false # only available with sqlite file_format. true enables history isolation, false disables it. true will allow the history to be isolated to the current session using up/down arrows. false will allow the history to be shared across all sessions.
    }

    completions: {
        case_sensitive: false # set to true to enable case-sensitive completions
        quick: true    # set this to false to prevent auto-selecting completions when only one remains
        partial: true    # set this to false to prevent partial filling of the prompt
        algorithm: "prefix"    # prefix or fuzzy
        sort: "smart" # "smart" (alphabetical for prefix matching, fuzzy score for fuzzy matching) or "alphabetical"
        external: {
            enable: true # set to false to prevent nushell looking into $env.PATH to find more suggestions, `false` recommended for WSL users as this look up may be very slow
            max_results: 100 # setting it lower can improve completion performance at the cost of omitting some options
            completer: null # check 'carapace_completer' above as an example
        }
        use_ls_colors: true # set this to true to enable file/path/directory completions using LS_COLORS
    }

    filesize: {
        metric: false # true => KB, MB, GB (ISO standard), false => KiB, MiB, GiB (Windows standard)
        format: "auto" # b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, auto
    }

    cursor_shape: {
        emacs: line # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (line is the default)
        vi_insert: block # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (block is the default)
        vi_normal: underscore # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (underscore is the default)
    }

    #color_config: $dark_theme # if you want a more interesting theme, you can replace the empty record with `$dark_theme`, `$light_theme` or another custom record
    use_grid_icons: true
    footer_mode: 25 # always, never, number_of_rows, auto
    float_precision: 2 # the precision for displaying floats in tables
    buffer_editor: null # command that will be used to edit the current line buffer with ctrl+o, if unset fallback to $env.EDITOR and $env.VISUAL
    use_ansi_coloring: true
    bracketed_paste: true # enable bracketed paste, currently useless on windows
    edit_mode: emacs # emacs, vi
    shell_integration: {
        # osc2 abbreviates the path if in the home_dir, sets the tab/window title, shows the running command in the tab/window title
        osc2: true
        # osc7 is a way to communicate the path to the terminal, this is helpful for spawning new tabs in the same directory
        osc7: true
        # osc8 is also implemented as the deprecated setting ls.show_clickable_links, it shows clickable links in ls output if your terminal supports it. show_clickable_links is deprecated in favor of osc8
        osc8: true
        # osc9_9 is from ConEmu and is starting to get wider support. It's similar to osc7 in that it communicates the path to the terminal
        osc9_9: false
        # osc133 is several escapes invented by Final Term which include the supported ones below.
        # 133;A - Mark prompt start
        # 133;B - Mark prompt end
        # 133;C - Mark pre-execution
        # 133;D;exit - Mark execution finished with exit code
        # This is used to enable terminals to know where the prompt is, the command is, where the command finishes, and where the output of the command is
        osc133: true
        # osc633 is closely related to osc133 but only exists in visual studio code (vscode) and supports their shell integration features
        # 633;A - Mark prompt start
        # 633;B - Mark prompt end
        # 633;C - Mark pre-execution
        # 633;D;exit - Mark execution finished with exit code
        # 633;E - Explicitly set the command line with an optional nonce
        # 633;P;Cwd=<path> - Mark the current working directory and communicate it to the terminal
        # and also helps with the run recent menu in vscode
        osc633: true
        # reset_application_mode is escape \x1b[?1l and was added to help ssh work better
        reset_application_mode: true
    }
    render_right_prompt_on_last_line: false # true or false to enable or disable right prompt to be rendered on last line of the prompt.
    use_kitty_protocol: false # enables keyboard enhancement protocol implemented by kitty console, only if your terminal support this.
    highlight_resolved_externals: false # true enables highlighting of external commands in the repl resolved by which.
    recursion_limit: 50 # the maximum number of times nushell allows recursion before stopping it

    plugins: {} # Per-plugin configuration. See https://www.nushell.sh/contributor-book/plugins.html#configuration.

    plugin_gc: {
        # Configuration for plugin garbage collection
        default: {
            enabled: true # true to enable stopping of inactive plugins
            stop_after: 10sec # how long to wait after a plugin is inactive to stop it
        }
        plugins: {
            # alternate configuration for specific plugins, by name, for example:
            #
            # gstat: {
            #     enabled: false
            # }
        }
    }

    hooks: {
        pre_prompt: [{ null }] # run before the prompt is shown
        pre_execution: [{ null }] # run before the repl input is run
        env_change: {
            PWD: [{|before, after| null }] # run if the PWD environment is different since the last repl input
        }
        display_output: "if (term size).columns >= 100 { table -e } else { table }" # run to display the output of a pipeline
        command_not_found: { null } # return an error message when a command is not found
    }

    menus: [
        # Configuration for default nushell menus
        # Note the lack of source parameter
        {
            name: completion_menu
            only_buffer_difference: false
            marker: "| "
            type: {
                layout: columnar
                columns: 4
                col_width: 20     # Optional value. If missing all the screen width is used to calculate column width
                col_padding: 2
            }
            style: {
                text: green
                selected_text: { attr: r }
                description_text: yellow
                match_text: { attr: u }
                selected_match_text: { attr: ur }
            }
        }
        {
            name: ide_completion_menu
            only_buffer_difference: false
            marker: "| "
            type: {
                layout: ide
                min_completion_width: 0,
                max_completion_width: 50,
                max_completion_height: 10, # will be limited by the available lines in the terminal
                padding: 0,
                border: true,
                cursor_offset: 0,
                description_mode: "prefer_right"
                min_description_width: 0
                max_description_width: 50
                max_description_height: 10
                description_offset: 1
                # If true, the cursor pos will be corrected, so the suggestions match up with the typed text
                #
                # C:\> str
                #      str join
                #      str trim
                #      str split
                correct_cursor_pos: false
            }
            style: {
                text: green
                selected_text: { attr: r }
                description_text: yellow
                match_text: { attr: u }
                selected_match_text: { attr: ur }
            }
        }
        {
            name: history_menu
            only_buffer_difference: true
            marker: "? "
            type: {
                layout: list
                page_size: 10
            }
            style: {
                text: green
                selected_text: green_reverse
                description_text: yellow
            }
        }
        {
            name: help_menu
            only_buffer_difference: true
            marker: "? "
            type: {
                layout: description
                columns: 4
                col_width: 20     # Optional value. If missing all the screen width is used to calculate column width
                col_padding: 2
                selection_rows: 4
                description_rows: 10
            }
            style: {
                text: green
                selected_text: green_reverse
                description_text: yellow
            }
        }
    ]

    keybindings: [
        {
            name: completion_menu
            modifier: none
            keycode: tab
            mode: [emacs vi_normal vi_insert]
            event: {
                until: [
                    { send: menu name: completion_menu }
                    { send: menunext }
                    { edit: complete }
                ]
            }
        }
        {
            name: ide_completion_menu
            modifier: control
            keycode: char_n
            mode: [emacs vi_normal vi_insert]
            event: {
                until: [
                    { send: menu name: ide_completion_menu }
                    { send: menunext }
                    { edit: complete }
                ]
            }
        }
        {
            name: history_menu
            modifier: control
            keycode: char_r
            mode: [emacs, vi_insert, vi_normal]
            event: { send: menu name: history_menu }
        }
        {
            name: help_menu
            modifier: none
            keycode: f1
            mode: [emacs, vi_insert, vi_normal]
            event: { send: menu name: help_menu }
        }
        {
            name: completion_previous_menu
            modifier: shift
            keycode: backtab
            mode: [emacs, vi_normal, vi_insert]
            event: { send: menuprevious }
        }
        {
            name: next_page_menu
            modifier: control
            keycode: char_x
            mode: emacs
            event: { send: menupagenext }
        }
        {
            name: undo_or_previous_page_menu
            modifier: control
            keycode: char_z
            mode: emacs
            event: {
                until: [
                    { send: menupageprevious }
                    { edit: undo }
                ]
            }
        }
        {
            name: escape
            modifier: none
            keycode: escape
            mode: [emacs, vi_normal, vi_insert]
            event: { send: esc }    # NOTE: does not appear to work
        }
        {
            name: cancel_command
            modifier: control
            keycode: char_c
            mode: [emacs, vi_normal, vi_insert]
            event: { send: ctrlc }
        }
        {
            name: quit_shell
            modifier: control
            keycode: char_d
            mode: [emacs, vi_normal, vi_insert]
            event: { send: ctrld }
        }
        {
            name: clear_screen
            modifier: control
            keycode: char_l
            mode: [emacs, vi_normal, vi_insert]
            event: { send: clearscreen }
        }
        {
            name: search_history
            modifier: control
            keycode: char_q
            mode: [emacs, vi_normal, vi_insert]
            event: { send: searchhistory }
        }
        {
            name: open_command_editor
            modifier: control
            keycode: char_o
            mode: [emacs, vi_normal, vi_insert]
            event: { send: openeditor }
        }
        {
            name: move_up
            modifier: none
            keycode: up
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: menuup }
                    { send: up }
                ]
            }
        }
        {
            name: move_down
            modifier: none
            keycode: down
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: menudown }
                    { send: down }
                ]
            }
        }
        {
            name: move_left
            modifier: none
            keycode: left
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: menuleft }
                    { send: left }
                ]
            }
        }
        {
            name: move_right_or_take_history_hint
            modifier: none
            keycode: right
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: historyhintcomplete }
                    { send: menuright }
                    { send: right }
                ]
            }
        }
        {
            name: move_one_word_left
            modifier: control
            keycode: left
            mode: [emacs, vi_normal, vi_insert]
            event: { edit: movewordleft }
        }
        {
            name: move_one_word_right_or_take_history_hint
            modifier: control
            keycode: right
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: historyhintwordcomplete }
                    { edit: movewordright }
                ]
            }
        }
        {
            name: move_to_line_start
            modifier: none
            keycode: home
            mode: [emacs, vi_normal, vi_insert]
            event: { edit: movetolinestart }
        }
        {
            name: move_to_line_start
            modifier: control
            keycode: char_a
            mode: [emacs, vi_normal, vi_insert]
            event: { edit: movetolinestart }
        }
        {
            name: move_to_line_end_or_take_history_hint
            modifier: none
            keycode: end
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: historyhintcomplete }
                    { edit: movetolineend }
                ]
            }
        }
        {
            name: move_to_line_end_or_take_history_hint
            modifier: control
            keycode: char_e
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: historyhintcomplete }
                    { edit: movetolineend }
                ]
            }
        }
        {
            name: move_to_line_start
            modifier: control
            keycode: home
            mode: [emacs, vi_normal, vi_insert]
            event: { edit: movetolinestart }
        }
        {
            name: move_to_line_end
            modifier: control
            keycode: end
            mode: [emacs, vi_normal, vi_insert]
            event: { edit: movetolineend }
        }
        {
            name: move_up
            modifier: control
            keycode: char_p
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: menuup }
                    { send: up }
                ]
            }
        }
        {
            name: move_down
            modifier: control
            keycode: char_t
            mode: [emacs, vi_normal, vi_insert]
            event: {
                until: [
                    { send: menudown }
                    { send: down }
                ]
            }
        }
        {
            name: delete_one_character_backward
            modifier: none
            keycode: backspace
            mode: [emacs, vi_insert]
            event: { edit: backspace }
        }
        {
            name: delete_one_word_backward
            modifier: control
            keycode: backspace
            mode: [emacs, vi_insert]
            event: { edit: backspaceword }
        }
        {
            name: delete_one_character_forward
            modifier: none
            keycode: delete
            mode: [emacs, vi_insert]
            event: { edit: delete }
        }
        {
            name: delete_one_character_forward
            modifier: control
            keycode: delete
            mode: [emacs, vi_insert]
            event: { edit: delete }
        }
        {
            name: delete_one_character_backward
            modifier: control
            keycode: char_h
            mode: [emacs, vi_insert]
            event: { edit: backspace }
        }
        {
            name: delete_one_word_backward
            modifier: control
            keycode: char_w
            mode: [emacs, vi_insert]
            event: { edit: backspaceword }
        }
        {
            name: move_left
            modifier: none
            keycode: backspace
            mode: vi_normal
            event: { edit: moveleft }
        }
        {
            name: newline_or_run_command
            modifier: none
            keycode: enter
            mode: emacs
            event: { send: enter }
        }
        {
            name: move_left
            modifier: control
            keycode: char_b
            mode: emacs
            event: {
                until: [
                    { send: menuleft }
                    { send: left }
                ]
            }
        }
        {
            name: move_right_or_take_history_hint
            modifier: control
            keycode: char_f
            mode: emacs
            event: {
                until: [
                    { send: historyhintcomplete }
                    { send: menuright }
                    { send: right }
                ]
            }
        }
        {
            name: redo_change
            modifier: control
            keycode: char_g
            mode: emacs
            event: { edit: redo }
        }
        {
            name: undo_change
            modifier: control
            keycode: char_z
            mode: emacs
            event: { edit: undo }
        }
        {
            name: paste_before
            modifier: control
            keycode: char_y
            mode: emacs
            event: { edit: pastecutbufferbefore }
        }
        {
            name: cut_word_left
            modifier: control
            keycode: char_w
            mode: emacs
            event: { edit: cutwordleft }
        }
        {
            name: cut_line_to_end
            modifier: control
            keycode: char_k
            mode: emacs
            event: { edit: cuttoend }
        }
        {
            name: cut_line_from_start
            modifier: control
            keycode: char_u
            mode: emacs
            event: { edit: cutfromstart }
        }
        {
            name: swap_graphemes
            modifier: control
            keycode: char_t
            mode: emacs
            event: { edit: swapgraphemes }
        }
        {
            name: move_one_word_left
            modifier: alt
            keycode: left
            mode: emacs
            event: { edit: movewordleft }
        }
        {
            name: move_one_word_right_or_take_history_hint
            modifier: alt
            keycode: right
            mode: emacs
            event: {
                until: [
                    { send: historyhintwordcomplete }
                    { edit: movewordright }
                ]
            }
        }
        {
            name: move_one_word_left
            modifier: alt
            keycode: char_b
            mode: emacs
            event: { edit: movewordleft }
        }
        {
            name: move_one_word_right_or_take_history_hint
            modifier: alt
            keycode: char_f
            mode: emacs
            event: {
                until: [
                    { send: historyhintwordcomplete }
                    { edit: movewordright }
                ]
            }
        }
        {
            name: delete_one_word_forward
            modifier: alt
            keycode: delete
            mode: emacs
            event: { edit: deleteword }
        }
        {
            name: delete_one_word_backward
            modifier: alt
            keycode: backspace
            mode: emacs
            event: { edit: backspaceword }
        }
        {
            name: delete_one_word_backward
            modifier: alt
            keycode: char_m
            mode: emacs
            event: { edit: backspaceword }
        }
        {
            name: cut_word_to_right
            modifier: alt
            keycode: char_d
            mode: emacs
            event: { edit: cutwordright }
        }
        {
            name: upper_case_word
            modifier: alt
            keycode: char_u
            mode: emacs
            event: { edit: uppercaseword }
        }
        {
            name: lower_case_word
            modifier: alt
            keycode: char_l
            mode: emacs
            event: { edit: lowercaseword }
        }
        {
            name: capitalize_char
            modifier: alt
            keycode: char_c
            mode: emacs
            event: { edit: capitalizechar }
        }
        # The following bindings with `*system` events require that Nushell has
        # been compiled with the `system-clipboard` feature.
        # This should be the case for Windows, macOS, and most Linux distributions
        # Not available for example on Android (termux)
        # If you want to use the system clipboard for visual selection or to
        # paste directly, uncomment the respective lines and replace the version
        # using the internal clipboard.
        {
            name: copy_selection
            modifier: control_shift
            keycode: char_c
            mode: emacs
            event: { edit: copyselection }
            # event: { edit: copyselectionsystem }
        }
        {
            name: cut_selection
            modifier: control_shift
            keycode: char_x
            mode: emacs
            event: { edit: cutselection }
            # event: { edit: cutselectionsystem }
        }
        # {
        #     name: paste_system
        #     modifier: control_shift
        #     keycode: char_v
        #     mode: emacs
        #     event: { edit: pastesystem }
        # }
        {
            name: select_all
            modifier: control_shift
            keycode: char_a
            mode: emacs
            event: { edit: selectall }
        }
    ]
}

###############################################################################
# Aliases (except git)

# chezmoi

alias :ha = chezmoi add
alias :hA = chezmoi add --template
alias :hc = cd (chezmoi source-path)
alias :hd = chezmoi diff --init
alias :he = chezmoi edit --init --apply
alias :hs = chezmoi edit-config
alias :hS = chezmoi cat-config
alias :hm = chezmoi merge
alias :hp = chezmoi apply --init
alias :hu = chezmoi update --init
alias :hU = chezmoi update --init --refresh-externals

# basics

{{- if .helix.enabled }}

alias e = {{ .helix.executable }}

{{- else }}

alias e = {{ coalesce (lookPath "vim") (lookPath "vi") }}

{{- end }}

alias o = open
alias q = exit

{{- if .qalc.enabled }}

alias :calc = qalc

{{- end }}

# [bc]at

{{- if .bat.enabled }}

alias c = bat --style=plain
alias b = bat --style=default

{{- else }}

alias c = cat

{{- end }}

{{- if .git.enabled }}

###############################################################################
# Git Aliases from https://github.com/zimfw/git

# Helper Functions
alias git-branch-current = git symbolic-ref -q --short HEAD
alias git-root = try { git rev-parse --show-toplevel } catch { print . }

def git-branch-remote-tracking-gone [status: string] {
    git for-each-ref --format '%(refname:short) %(upstream:track,nobracket)' refs/heads | grep $' ($status)$' | sed $'s/ ($status)$//'   
}

def git-branch-delete-interactive [
    branch: string
    --force
] {
    let remote_branches = git rev-parse --abbrev-ref $'($branch)@{u}'
    if $force {
        git branch --delete --force $branch
    } else {
        git branch --delete $branch
    }
    if $remote_branches {
        let answer = input $'Also delete remote branch(es) ($remote_branches)? [y/N]' -n 1
        if $answer == 'y' or $answer == 'Y' {
            for remote_branch in $remote_branches {
                git push origin
            }
        }
    }
}

def git-stash-clear-interactive [] {
    let stashed = git rev-list --walk-reflogs --count refs/stash
    if $stashed {
        let answer = input $'Clear ($stashed) stashed state(s)? [y/N]' -n 1
        if $answer == 'y' or $answer == 'Y' {
            git stash clear
        }
    }
}

def git-stash-recover [...commits] {
    git rev-parse --is-inside-work-tree | ignore

    if ($commits | length) == 0 {
        print "Usage: $0 <...commits>"
    }

    for commit in $commits {
        let message = git log -1 --pretty='format:%s' $commit
        git update-ref -m $message refs/stash $commit
    }
}

# Branch (b)
alias :gb = git branch
alias :gbc = git checkout -b
alias :gbd = git checkout --detach
alias :gbl = git branch -vv
alias :gbL = git branch --all -vv
alias :gbm = git branch --move
alias :gbM = git branch --move --force
alias :gbR = git branch --force
alias :gbs = git show-branch
alias :gbS = git show-branch --all
alias :gbu = git branch --unset-upstream
alias :gbG = git-branch-remote-tracking gone | xargs -r git branch --delete --force
alias :gbx = git branch-delete-interactive
alias :gbX = git-branch-delete-interactive --force

# Commit (c)
alias :gc = git commit --verbose
alias :gca = git commit --verbose --all
alias :gcA = git commit --verbose --patch
alias :gcm = git commit --message
alias :gco = git checkout
alias :gcO = git checkout --patch
alias :gcf = git commit --amend --reuse-message HEAD
alias :gcF = git commit --verbose --amend
alias :gcp = git cherry-pick
alias :gcP = git cherry-pick --no-commit
alias :gcr = git revert
alias :gcR = git reset 'HEAD^'
alias :gcs = git show --ext-diff
alias :gcsp = git show --no-ext-diff
alias :gcS = git commit --verbose -S
alias :gcu = git commit --fixup
alias :gcU = git commit --squash
alias :gcv = git verify-commit

# Conflict (C)
alias :gCl = git --no-pager diff --diff-filter=U --name-only
alias :gCa = git add (:gCl)
alias :gCe = git mergetool (:gCl)
alias :gCo = git checkout --ours --
alias :gCO = :gCo (:gCl)
alias :gCt = git checkout --theirs --
alias :gCT = :gCt (:gCl)

# Data (d)
alias :gd = git ls-files
alias :gdc = git ls-files --cached
alias :gdx = git ls-files --deleted
alias :gdm = git ls-files --modified
alias :gdu = git ls-files --other --exclude-standard
alias :gdk = git ls-files --killed
alias :gdi = git status --porcelain --short --ignored | sed -n 's/^!! //p'
alias :gdI = git ls-files --ignored --exclude-per-directory=.gitignore --cached

# Fetch (f)
alias :gf = git fetch
alias :gfa = git fetch --all
alias :gfp = git fetch --all --prune
alias :gfc = git clone
alias :gfm = git pull --no-rebase
alias :gfr = git pull --rebase
alias :gfu = git pull --ff-only --all --prune

# Grep (g)
alias :gg = git grep
alias :ggi = git grep --ignore-case
alias :ggl = git grep --files-with-matches
alias :ggL = git grep --files-without-match
alias :ggv = git grep --invert-match
alias :ggw = git grep --word-regexp

# Help (h)
alias :gh = git help
alias :ghw = git help --web

# Index (i)
alias :gia = git add
alias :giA = git add --patch
alias :giu = git add --update
alias :giU = git add --verbose --all
alias :gid = git diff --no-ext-diff --cached --ext-diff
alias :gidp = git diff --no-ext-diff --cached --no-ext-diff
alias :giD = git diff --no-ext-diff --cached --word-diff
alias :gir = git reset
alias :giR = git reset --patch
alias :gix = git rm --cached -r
alias :giX = git rm --cached -rf

# Log (l)
alias :gl = git log --date-order
alias :gls = git log --date-order --stat
alias :gld = git log --date-order --stat --patch --ext-diff
alias :gldp = git log --date-order --stat --patch --no-ext-diff
alias :glf = git log --date-order --stat --patch --follow
alias :glo = git log --date-order
alias :glO = git log --date-order
alias :glg = git log --date-order --graph
alias :glv = git log --date-order --show-signature
alias :glc = git shortlog --summary --numbered
alias :glr = git reflog

# Merge (m)
alias :gm = git merge
alias :gma = git merge --abort
alias :gmc = git merge --continue
alias :gmC = git merge --no-commit
alias :gmF = git merge --no-ff
alias :gms = git merge --squash
alias :gmS = git merge -S
alias :gmv = git merge --verify-signatures
alias :gmt = git mergetool

# Push (p)
alias :gp = git push
alias :gpf = git push --force-with-lease
alias :gpF = git push --force
alias :gpa = git push --all
def :gpA [] {
    git push --all
    if $env.LAST_EXIT_CODE == 0 {
        git push --tags --no-verify
    }
}
alias :gpt = git push --tags
alias :gpc = git push --set-upstream origin (git-branch-current)
alias :gpp = do -c { let branch = git-branch-current; git pull origin $branch; git push origin $branch }

# Rebase (r)
alias :gr = git rebase
alias :gra = git rebase --abort
alias :grc = git rebase --continue
alias :gri = git rebase --interactive --autosquash
alias :grs = git rebase --skip
alias :grS = git rebase --exec 'git commit --amend --no-edit --no-verify -S'

# Remote (R)
alias :gR = git remote
alias :gRl = git remote --verbose
alias :gRa = git remote add
alias :gRx = git remote rm
alias :gRm = git remote rename
alias :gRu = git remote update
alias :gRp = git remote prune
alias :gRs = git remote show
alias :gRS = git remote set-url

# Stash (s)
alias :gs = git stash
alias :gsa = git stash apply
alias :gsx = git stash drop
alias :gsX = git-stash-clear-interactive
alias :gsl = git stash list
alias :gsd = git stash show --patch --stat --ext-diff
alias :gsdp = git stash show --patch --stat --no-ext-diff
alias :gsp = git stash pop
alias :gsr = git-stash-recover
alias :gss = git stash save --include-untracked
alias :gsS = git stash save --patch --no-keep-index
alias :gsw = git stash save --include-untracked --keep-index
alias :gsi = git stash push --staged
alias :gsu = git stash show --patch | git apply --reverse

# Submodule (S)
alias :gS = git submodule
alias :gSa = git submodule add
alias :gSf = git submodule foreach
alias :gSi = git submodule init
alias :gSI = git submodule update --init --recursive
alias :gSl = git submodule status
alias :gSm = git-submodule-move
alias :gSs = git submodule sync
alias :gSu = git submodule update --remote
alias :gSx = git-submodule-remove

# Tag (t)
alias :gt = git tag
alias :gtl = git tag --list --sort=-committerdate
alias :gts = git tag --sign
alias :gtv = git verify-tag
alias :gtx = git tag --delete

# Main working tree (w)
alias :gws = git status --short
alias :gwS = git status
alias :gwd = git diff --ext-diff
alias :gwdp = git diff --no-ext-diff
alias :gwD = git diff --no-ext-diff --word-diff
alias :gwr = git reset --soft
alias :gwR = git reset --hard
alias :gwc = git clean --dry-run
alias :gwC = git clean -d --force
alias :gwm = git mv
alias :gwM = git mv -f
alias :gwx = git rm -r
alias :gwX = git rm -rf

# Working trees (W)
alias :gW = git worktree
alias :gWa = git worktree add
alias :gWl = git worktree list
alias :gWm = git worktree move
alias :gWp = git worktree prune
alias :gWx = git worktree remove
alias :gWX = git worktree remove --force

# Switch (y)
alias :gy = git switch # requires Git 2.23
alias :gyc = git switch --create
alias :gyd = git switch --detach

# Misc
alias :g.. = cd (git-root)

$env.DFT_DISPLAY = 'side-by-side-show-both'

# https://www.youtube.com/watch?v=aolI_Rz0ZqY
alias :g?? = git blame -wCCC

{{- end }}

###############################################################################
# Prompt

use starship.nu
