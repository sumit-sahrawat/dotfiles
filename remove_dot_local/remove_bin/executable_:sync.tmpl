{{- if .app.git -}}

#!/usr/bin/env bash
#
# A script to clone/fork/sync multiple git repos listed in a file in a sequence
# using the `gh` command line tool. The input file should have the following
# structure:
#
# (space)*(operation: [clone | fork])(space)+(url)(space)+(directory)(space)*
#
# Empty lines and those beginning with hash (#) are ignored.

set -euo pipefail

FAST=false
while getopts "f" option; do
	case ${option} in
		f) FAST=true ;;
		*) exit 1 ;;
	esac
done

shift $((OPTIND - 1))

DEFAULT_LIST_FILE=repos.txt
if [[ ${#} -eq 0 ]]; then
	>&2 echo "Using default repo list file: ${DEFAULT_LIST_FILE}"
fi
LIST_FILE=${1:-${DEFAULT_LIST_FILE}}

if [[ ! -f "${LIST_FILE}" ]]; then
	echo "Could not find ${LIST_FILE}"
	exit 1
fi

function failed_to {
	#printf "\e[31m✗\e[m Failed to %s \e[36m%s\e[m to \e[34m%s\e[m\n" "${1}" "${2}" "${3}"
	>&2 printf "\e[31m✗\e[m Failed to %s %s to %s\n" "${1}" "${2}" "${3}"
}

function read_list_from {
	sed -E -e '/^( |\t)*(#|$)/d' -e 's/  */\t/g' "${1}"
}

while read -r line; do
	target="$(echo "${line}" | cut -f1)"
	cmd="$(echo "${line}" | cut -f2)"
	repo="$(echo "${line}" | cut -f3)"

	if [[ -d "${target}" ]]; then
		if ! ${FAST}; then
			(cd "${target}"; gh repo sync || failed_to 'sync' "${repo}" "${target}")
		fi
	else
		case ${cmd} in
			clone) gh repo clone "${repo}" "${target}" || failed_to 'clone' "${repo}" "${target}" ;;
			fork)  gh repo fork --clone "${repo}" "${target}" || failed_to 'fork and clone' "${repo}" "${target}" ;;
			*) failed_to "${cmd}" "${repo}" "${target}"
		esac
	fi
done < <(read_list_from "${LIST_FILE}")

{{- end }}
