{{- if .app.git -}}

#!/usr/bin/env bash
#
# A script to clone or update (fetch) multiple git repos listed in a file in a
# sequence. The input file should have lines containing the target directory
# and the full remote separated by whitespace.
#
# Empty lines and those beginning with hash (#) are ignored.
#
# The (-f) option can be used to skip fetch and just clone repos where needed.

set -euo pipefail

DIRECTORY_COLOR='\033[0;34m' # blue
URL_COLOR='\033[0;36m'       # cyan
RESET_COLOR='\033[0m'

FAST=false
while getopts "f" option; do
	case ${option} in
		f) FAST=true ;;
		*) exit 1 ;;
	esac
done

shift $((OPTIND - 1))

DEFAULT_LIST_FILE=repos.txt
if [[ ${#} -eq 0 ]]; then
	>&2 echo "Using default repo list file: ${DEFAULT_LIST_FILE}"
fi
LIST_FILE=${1:-${DEFAULT_LIST_FILE}}

if [[ ! -f "${LIST_FILE}" ]]; then
	echo "Could not find ${LIST_FILE}"
	exit 1
fi

function trying_to {
	>&2 printf ">> %s ${URL_COLOR}%s${RESET_COLOR} %s ${DIRECTORY_COLOR}%s${RESET_COLOR}\n" "${1}" "${2}" "${3}" "${4}"
}

function failed_to {
	>&2 printf "${RED}%s${RESET_COLOR} Failed to %s ${URL_COLOR}%s${RESET_COLOR} %s ${DIRECTORY_COLOR}%s${RESET_COLOR}\n" "âœ—" "${1}" "${2}" "${3}" "${4}"
}

function read_list_from {
	sed -E -e '/^( |\t)*(#|$)/d' -e 's/  */\t/g' "${1}"
}

while read -r line; do
	target="$(echo "${line}" | cut -f1)"
	remote="$(echo "${line}" | cut -f2)"

	if [[ -d "${target}" ]]; then
		if ! ${FAST}; then
			trying_to 'Fetching'  "${remote}" 'at' "${target}"
			git -C "${target}" fetch --quiet || failed_to 'fetch' "${remote}" 'at' "${target}"
		fi
	else
		trying_to 'Cloning'  "${remote}" 'to' "${target}"
		git clone --quiet "${remote}" "${target}" || failed_to 'clone' "${remote}" 'to' "${target}"
	fi
done < <(read_list_from "${LIST_FILE}")

{{- end }}
